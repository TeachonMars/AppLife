/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * Based on: https://github.com/mcxiaoke/gradle-mvn-push/blob/master/gradle-mvn-push.gradle.
 * Local test with (..._REPOSITORY_URL properties must be full paths):
 * gradlew clean buildArchives uploadArchives --stacktrace --info -PSNAPSHOT_REPOSITORY_URL=file://p:\projects\contrib\github-glide\repo-snapshot -PRELEASE_REPOSITORY_URL=file://p:\projects\contrib\github-glide\repo-release
 * For faster runs add: -x check
 *
 */
apply plugin: 'maven'

version = VERSION_NAME
group = GROUP
//LOCAL TEST
def MAVEN_REPO_URL = "http://localhost:8081/artifactory/gradle-release-local"
def MAVEN_REPO_USERNAME = "admin"
def MAVEN_REPO_PASSWORD = "admin"
afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.artifactId = ARTIFACT_NAME
                repository(url: MAVEN_REPO_URL) {
                    authentication(userName: MAVEN_REPO_USERNAME, password: MAVEN_REPO_PASSWORD)
                }

                pom.project {
                    name = ARTIFACT_NAME
                    description = POM_DESCRIPTION
                    url = POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name = POM_LICENSE_NAME
                            url = POM_LICENSE_URL
                            distribution = POM_LICENSE_DISTRIBUTION
                        }
                    }

                    organization {
                        name POM_ORGANIZATION_NAME
                        url POM_ORGANIZATION_URL
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                    }
                }

            }
        }
    }

    def isAndroidProject = project.plugins.hasPlugin('com.android.application') || project.plugins.hasPlugin('com.android.library')

    if (isAndroidProject) {
        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from project.android.sourceSets.main.java.source
            baseName "${project.name}"
        }

        task androidLibraryJar(type: Jar, dependsOn: compileReleaseJavaWithJavac /* == variant.javaCompile */) {
            from compileReleaseJavaWithJavac.destinationDir
            exclude '**/R.class'
            exclude '**/BuildConfig.class'
            exclude '**/R$*.class'
            baseName "${project.name}"
        }

        artifacts {
            if (project.hasProperty("POM_PACKAGING") &&
                    POM_PACKAGING.equalsIgnoreCase("aar")) {
                "${buildDir}/outputs/aar/${ARTIFACT_NAME}-release.aar"
            } else {
                archives androidLibraryJar
            }

        }
    } else if (project.plugins.hasPlugin('java')) {
        artifacts {
            components.java
        }
    }

    logger.info("Published artifacts in ${configurations.archives}:")
    configurations.archives.artifacts.files.files.each { logger.info("\t$it"); }
}